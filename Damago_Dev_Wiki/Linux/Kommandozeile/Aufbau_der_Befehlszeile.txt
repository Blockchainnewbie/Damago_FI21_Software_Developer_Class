Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2024-03-07T11:23:07+01:00

====== Aufbau der Befehlszeile ======
Angelegt Thursday 07 March 2024

1. **Befehl:**
   - Das auszuführende Programm, z.B., im Beispiel: `ls`.

2. **Option(en)/Parameter:**
   - "Schalter" zur Veränderung des Befehlsverhaltens, z.B., `-l` im Beispiel.
   - Optionen können in Kurz- oder Langform verwendet werden, z.B., `-l` entspricht `--format=long`.
   - Mehrere Optionen können kombiniert werden, und für die Kurzform können Buchstaben zusammengeschrieben werden, z.B.:
	 - `$ ls -al`
	 - `$ ls -a -l`
	 - `$ ls --all --format=long`

3. **Argument(e):**
   - Zusätzliche Angaben, die vom Programm benötigt werden, wie Dateiname oder Pfad, z.B., `/home` im Beispiel.

4. **Obligatorischer Teil:**
   - Der Befehl selbst ist der einzige obligatorische Teil dieser Struktur.

5. **Optionale Elemente:**
   - Andere Elemente wie Optionen, Parameter oder Argumente sind im Allgemeinen optional, aber ein Programm kann bestimmte Angaben erfordern.

6. **Befehlstypen:**
   - **Interne Befehle (Builtins):**
	 - Teil der Shell selbst, etwa 30 solcher Befehle.
	 - Beispiel: `cd`, `set`, `export`.

   - **Externe Befehle:**
	 - Befinden sich in einzelnen Dateien, oft binäre Programme oder Skripte.
	 - Wenn ein Befehl kein Builtin ist, sucht die Shell mit der PATH-Variablen nach einer ausführbaren Datei mit dem Namen des Befehls.

7. **Befehlstyp überprüfen:**
   - Verwende den Befehl `type`, um den Typ eines bestimmten Befehls zu zeigen, z.B.:
	 - `$ type echo`
	   - Ausgabe: `echo is a shell builtin`
	 - `$ type man`
	   - Ausgabe: `man is /usr/bin/man`

8. **Quoting:**

1. **Quoting-Einführung:**
   - Linux-Nutzer müssen Dateien oder Variablen erstellen und manipulieren, was einfach ist, wenn es um kurze Dateinamen und einzelne Werte geht.
   - Komplexer wird es jedoch mit Leerzeichen, Sonderzeichen und Variablen.

{{./pasted_image003.png}}

2. **Arten von Anführungszeichen:**
   - Drei Arten in Bash:
	  - Doppelte Anführungszeichen (" ")
	  - Einfache Anführungszeichen (' ')
	  - Escape-Zeichen (\)

3. **Beispiel mit TWOWORDS-Variable:**
   - Unterschiedliche Auswirkungen auf Befehle durch unterschiedliches Quoting.
   - Veranschaulichung mit `touch`-Befehlen und Ausgabe von `ls -l`.

4. **Doppelte Anführungszeichen:**
   - Interpretieren den Text zwischen den Anführungszeichen als reguläre Zeichen.
   - $, \ und ` behalten ihre Bedeutung für Variablen, Befehlsersetzung und arithmetische Funktionen bei.
   - Beispiel mit der Variable $USER und Leerzeichen als Argumententrenner.

{{./pasted_image004.png}}
{{./pasted_image005.png}}

5. **Einfache Anführungszeichen:**
   - Heben jede spezielle Bedeutung für jedes Zeichen auf, ohne Ausnahmen wie bei den doppelten Anführungszeichen.
   - Beispiel mit der Variable $USER und Anzeige ohne Ersetzung.
{{./pasted_image006.png}} {{./pasted_image007.png}}

6. **Escape-Zeichen:**
   - Entfernen spezielle Bedeutungen von Zeichen in der Bash.
   - Beispiel mit der Variable $USER und Verwendung von \, um die besondere Bedeutung des Dollar-Zeichens aufzuheben.

{{./pasted_image008.png}} {{./pasted_image009.png}}
Die Verwendung von verschiedenen Quoting-Methoden beeinflusst die Interpretation von Zeichenketten und Variablen in der Bash.
